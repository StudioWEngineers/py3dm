name: Tests

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: test-${{ github.ref }}
  cancel-in-progress: false

jobs:
  check_relevant_changes:
    name: check for relevant changes
    runs-on: ubuntu-latest
    outputs:
      any_changed: ${{ steps.changed-files.outputs.any_changed }}
    steps:
      - name: checkout
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 2
      - name: check changed files
        uses: tj-actions/changed-files@v45.0.4
        id: changed-files
        with:
          files: |
            .github/workflows/workflow_ci.yml
            py3dm/__init__.py
            src/**/*.h
            src/**/*.cpp
            tests/**
            CMakeLists.txt
            pyproject.toml
      - name: List all changed files
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          for file in ${ALL_CHANGED_FILES}; do
            echo "$file was changed"
          done

  cpython_build_and_test:
    needs: [check_relevant_changes]
    if: needs.check_relevant_changes.outputs.any_changed == 'true'

    strategy:
      fail-fast: false
      matrix:
        os: ['windows-latest', 'macos-15', 'ubuntu-latest']
        python: ['3.12', '3.13', '3.14', '3.15.0-alpha.1']

    name: "Python ${{ matrix.python }} / ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}

    steps:
      - name: set up python ${{ matrix.python }}
        uses: actions/setup-python@v5.4.0
        with:
          python-version: ${{ matrix.python }}

      - name: install the latest CMake
        uses: lukka/get-cmake@latest

      - name: install dependencies
        run: python -m pip install --upgrade pip setuptools wheel build scikit-build-core

      - name: Install libuuid (dev headers and linker support)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y uuid-dev

      - name: checkout
        uses: actions/checkout@v4.1.1

      - name: update submodules
        run: git submodule update --init --recursive

      - name: build ${{ matrix.python }} ${{ matrix.os }}
        run: python -m build

      - name: install package
        run: |
          cd dist
          python -m pip install *.whl
        shell: bash

      - name: test ${{ matrix.python }} ${{ matrix.os }}
        run: |
          cd tests
          python -m unittest discover --verbose
        shell: bash

  pypy_build_build_and_test:
    needs: [check_relevant_changes]
    if: needs.check_relevant_changes.outputs.any_changed == 'true'

    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest']
        python: [pypy3.9, pypy3.10]

    name: "Python ${{ matrix.python }} / ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: update submodules
        run: git submodule update --init --recursive

      - name: Set up ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          architecture: x64

      - name: Display Python version
        run: |
          python --version
          python -c "import sys; print(sys.implementation)"

      - name: Manually install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install scikit-build-core>=0.11.5 nanobind build

      - name: Install libuuid (dev headers and linker support)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y uuid-dev

      - name: Build wheel without build isolation
        run: |
          python -m build --wheel --no-isolation

      - name: Install built wheel
        run: |
          pip install --no-deps --ignore-requires-python dist/*.whl

      - name: test ${{ matrix.python }} / ${{ matrix.os }}"
        run: |
          cd tests
          python -m unittest discover --verbose
        shell: bash

  cpython_build_and_test_clang_on_windows:
    needs: [check_relevant_changes]
    if: needs.check_relevant_changes.outputs.any_changed == 'true'

    strategy:
      fail-fast: false
      matrix:
        os: ['windows-latest']
        python: ['3.12', '3.13', '3.14', '3.15.0-alpha.1']

    name: "Python ${{ matrix.python }} / ${{ matrix.os }} / CLANG"
    runs-on: ${{ matrix.os }}

    steps:
      - name: set up python ${{ matrix.python }}
        uses: actions/setup-python@v5.4.0
        with:
          python-version: ${{ matrix.python }}

      - name: install the latest CMake
        uses: lukka/get-cmake@latest

      - name: install Ninja
        run: choco install ninja

      - name: install LLVM/Clang
        uses: egor-tensin/setup-clang@v1

      - name: install dependencies
        run: python -m pip install --upgrade pip setuptools wheel build scikit-build-core

      - name: checkout
        uses: actions/checkout@v4.1.1

      - name: update submodules
        run: git submodule update --init --recursive

      - name: build ${{ matrix.python }} ${{ matrix.os }}
        run: python -m build
        env:
          CMAKE_ARGS: -G Ninja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
          CMAKE_GENERATOR: Ninja
          CMAKE_MAKE_PROGRAM: ninja
          CC: clang
          CXX: clang++

      - name: install package
        run: |
          cd dist
          python -m pip install *.whl
        shell: bash

      - name: test ${{ matrix.python }} ${{ matrix.os }}
        run: |
          cd tests
          python -m unittest discover --verbose
        shell: bash
